/*
김다혜
•	public: 어디서든 접근가능
•	protected: 같은 패키지나 자식패키지만 접근 가능
•	default: 같은 패키지안에서만 접근 가능, 아무것도 안적으면 기본값으로 적용
•	private: 자신의 클래스 안에서만 접근 가능

•	static 변수: 아래와 동일
•	static 메서드: 전역적으로 공용으로 변수나 메서드를 쓰고싶을 때 사용함.

•	final 변수: 호출과 동시에 초기화 필수 / 불변의 값을 설정하기 위해 사용
•	final 메서드: 오버라이딩 x
•	final 클래스: 상속 불가능

•	abstract 클래스: 추상 메서드를 가진 클래스
•	abstract 메서드: abstract 리턴값 메서드명 ();과 같은 형태로 실행문이 없는 것이 특징, 상속받은 클래스에 대해 해당 메서드 기입을 강제한다. 클래스의 설계도와 같은 역할

•	interface: 클래스에 대한 동일 기능의 틀을 만드는 가능
•	abstract class: 

•	extends: 부모로 부터 상속을 받는 키워드
•	implements: interface를 해당 키워드를 통해 구현

•	this: 지금 있는 클래스에 대한 변수 혹은 인스턴스
•	super: 부모로 부터 상속 받은 클래스 앞에 붙여주는 것

•	오버로딩: 변수의 값, 갯수, 타입을 다르게 함으로써 메서드를 재사용 가능하게 하는 기능
•	오버라이딩: 추상 클래스 혹은 부모 클래스로 부터 상속 받은 후 상속받은 메소드를 재정의 하는 기능

•	try: 실패할 수도 성공할 수도 있는 실행문을 입력
•	catch: 실행에 실패하면 출력할 내용을 입력 한다. 실패 시 출력됨
•	finally: 위의 것들을 제외하고서도 무조건 출력 실행문 입력
*/